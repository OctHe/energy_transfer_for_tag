# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_beamnet_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_beamnet_swig')
    _beamnet_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_beamnet_swig', [dirname(__file__)])
        except ImportError:
            import _beamnet_swig
            return _beamnet_swig
        try:
            _mod = imp.load_module('_beamnet_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _beamnet_swig = swig_import_helper()
    del swig_import_helper
else:
    import _beamnet_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _beamnet_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _beamnet_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _beamnet_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _beamnet_swig.high_res_timer_epoch()
class correlation_detector(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of beamnet::correlation_detector.

    To avoid accidental use of raw pointers, beamnet::correlation_detector's constructor is in a private implementation class. beamnet::correlation_detector::make is the public interface for creating new instances.

    Args:
        len : 
        threshold : 
        deviation : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(len, threshold, deviation):
        """
        make(int len, float threshold, float deviation) -> correlation_detector_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of beamnet::correlation_detector.

        To avoid accidental use of raw pointers, beamnet::correlation_detector's constructor is in a private implementation class. beamnet::correlation_detector::make is the public interface for creating new instances.

        Args:
            len : 
            threshold : 
            deviation : 
        """
        return _beamnet_swig.correlation_detector_make(len, threshold, deviation)

    make = staticmethod(make)
    __swig_destroy__ = _beamnet_swig.delete_correlation_detector
    __del__ = lambda self: None
correlation_detector_swigregister = _beamnet_swig.correlation_detector_swigregister
correlation_detector_swigregister(correlation_detector)

def correlation_detector_make(len, threshold, deviation):
    """
    correlation_detector_make(int len, float threshold, float deviation) -> correlation_detector_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of beamnet::correlation_detector.

    To avoid accidental use of raw pointers, beamnet::correlation_detector's constructor is in a private implementation class. beamnet::correlation_detector::make is the public interface for creating new instances.

    Args:
        len : 
        threshold : 
        deviation : 
    """
    return _beamnet_swig.correlation_detector_make(len, threshold, deviation)

class correlation_detector_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::beamnet::correlation_detector)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::beamnet::correlation_detector)> self) -> correlation_detector_sptr
        __init__(boost::shared_ptr<(gr::beamnet::correlation_detector)> self, correlation_detector p) -> correlation_detector_sptr
        """
        this = _beamnet_swig.new_correlation_detector_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(correlation_detector_sptr self) -> correlation_detector"""
        return _beamnet_swig.correlation_detector_sptr___deref__(self)

    __swig_destroy__ = _beamnet_swig.delete_correlation_detector_sptr
    __del__ = lambda self: None

    def make(self, len, threshold, deviation):
        """
        make(correlation_detector_sptr self, int len, float threshold, float deviation) -> correlation_detector_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of beamnet::correlation_detector.

        To avoid accidental use of raw pointers, beamnet::correlation_detector's constructor is in a private implementation class. beamnet::correlation_detector::make is the public interface for creating new instances.

        Args:
            len : 
            threshold : 
            deviation : 
        """
        return _beamnet_swig.correlation_detector_sptr_make(self, len, threshold, deviation)


    def history(self):
        """history(correlation_detector_sptr self) -> unsigned int"""
        return _beamnet_swig.correlation_detector_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(correlation_detector_sptr self, int which, int delay)
        declare_sample_delay(correlation_detector_sptr self, unsigned int delay)
        """
        return _beamnet_swig.correlation_detector_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(correlation_detector_sptr self, int which) -> unsigned int"""
        return _beamnet_swig.correlation_detector_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(correlation_detector_sptr self) -> int"""
        return _beamnet_swig.correlation_detector_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(correlation_detector_sptr self) -> double"""
        return _beamnet_swig.correlation_detector_sptr_relative_rate(self)


    def start(self):
        """start(correlation_detector_sptr self) -> bool"""
        return _beamnet_swig.correlation_detector_sptr_start(self)


    def stop(self):
        """stop(correlation_detector_sptr self) -> bool"""
        return _beamnet_swig.correlation_detector_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(correlation_detector_sptr self, unsigned int which_input) -> uint64_t"""
        return _beamnet_swig.correlation_detector_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(correlation_detector_sptr self, unsigned int which_output) -> uint64_t"""
        return _beamnet_swig.correlation_detector_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(correlation_detector_sptr self) -> int"""
        return _beamnet_swig.correlation_detector_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(correlation_detector_sptr self, int m)"""
        return _beamnet_swig.correlation_detector_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(correlation_detector_sptr self)"""
        return _beamnet_swig.correlation_detector_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(correlation_detector_sptr self) -> bool"""
        return _beamnet_swig.correlation_detector_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(correlation_detector_sptr self, int m)"""
        return _beamnet_swig.correlation_detector_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(correlation_detector_sptr self) -> int"""
        return _beamnet_swig.correlation_detector_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(correlation_detector_sptr self, int i) -> long"""
        return _beamnet_swig.correlation_detector_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(correlation_detector_sptr self, long max_output_buffer)
        set_max_output_buffer(correlation_detector_sptr self, int port, long max_output_buffer)
        """
        return _beamnet_swig.correlation_detector_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(correlation_detector_sptr self, int i) -> long"""
        return _beamnet_swig.correlation_detector_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(correlation_detector_sptr self, long min_output_buffer)
        set_min_output_buffer(correlation_detector_sptr self, int port, long min_output_buffer)
        """
        return _beamnet_swig.correlation_detector_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(correlation_detector_sptr self) -> float"""
        return _beamnet_swig.correlation_detector_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(correlation_detector_sptr self) -> float"""
        return _beamnet_swig.correlation_detector_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(correlation_detector_sptr self) -> float"""
        return _beamnet_swig.correlation_detector_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(correlation_detector_sptr self) -> float"""
        return _beamnet_swig.correlation_detector_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(correlation_detector_sptr self) -> float"""
        return _beamnet_swig.correlation_detector_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(correlation_detector_sptr self) -> float"""
        return _beamnet_swig.correlation_detector_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(correlation_detector_sptr self, int which) -> float
        pc_input_buffers_full(correlation_detector_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.correlation_detector_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(correlation_detector_sptr self, int which) -> float
        pc_input_buffers_full_avg(correlation_detector_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.correlation_detector_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(correlation_detector_sptr self, int which) -> float
        pc_input_buffers_full_var(correlation_detector_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.correlation_detector_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(correlation_detector_sptr self, int which) -> float
        pc_output_buffers_full(correlation_detector_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.correlation_detector_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(correlation_detector_sptr self, int which) -> float
        pc_output_buffers_full_avg(correlation_detector_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.correlation_detector_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(correlation_detector_sptr self, int which) -> float
        pc_output_buffers_full_var(correlation_detector_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.correlation_detector_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(correlation_detector_sptr self) -> float"""
        return _beamnet_swig.correlation_detector_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(correlation_detector_sptr self) -> float"""
        return _beamnet_swig.correlation_detector_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(correlation_detector_sptr self) -> float"""
        return _beamnet_swig.correlation_detector_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(correlation_detector_sptr self) -> float"""
        return _beamnet_swig.correlation_detector_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(correlation_detector_sptr self) -> float"""
        return _beamnet_swig.correlation_detector_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(correlation_detector_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _beamnet_swig.correlation_detector_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(correlation_detector_sptr self)"""
        return _beamnet_swig.correlation_detector_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(correlation_detector_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _beamnet_swig.correlation_detector_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(correlation_detector_sptr self) -> int"""
        return _beamnet_swig.correlation_detector_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(correlation_detector_sptr self) -> int"""
        return _beamnet_swig.correlation_detector_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(correlation_detector_sptr self, int priority) -> int"""
        return _beamnet_swig.correlation_detector_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(correlation_detector_sptr self) -> std::string"""
        return _beamnet_swig.correlation_detector_sptr_name(self)


    def symbol_name(self):
        """symbol_name(correlation_detector_sptr self) -> std::string"""
        return _beamnet_swig.correlation_detector_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(correlation_detector_sptr self) -> io_signature_sptr"""
        return _beamnet_swig.correlation_detector_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(correlation_detector_sptr self) -> io_signature_sptr"""
        return _beamnet_swig.correlation_detector_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(correlation_detector_sptr self) -> long"""
        return _beamnet_swig.correlation_detector_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(correlation_detector_sptr self) -> basic_block_sptr"""
        return _beamnet_swig.correlation_detector_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(correlation_detector_sptr self, int ninputs, int noutputs) -> bool"""
        return _beamnet_swig.correlation_detector_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(correlation_detector_sptr self) -> std::string"""
        return _beamnet_swig.correlation_detector_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(correlation_detector_sptr self, std::string name)"""
        return _beamnet_swig.correlation_detector_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(correlation_detector_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _beamnet_swig.correlation_detector_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(correlation_detector_sptr self) -> swig_int_ptr"""
        return _beamnet_swig.correlation_detector_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(correlation_detector_sptr self) -> swig_int_ptr"""
        return _beamnet_swig.correlation_detector_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(correlation_detector_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _beamnet_swig.correlation_detector_sptr_message_subscribers(self, which_port)

correlation_detector_sptr_swigregister = _beamnet_swig.correlation_detector_sptr_swigregister
correlation_detector_sptr_swigregister(correlation_detector_sptr)


correlation_detector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
correlation_detector = correlation_detector.make;

class energy_detector(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of beamnet::energy_detector.

    To avoid accidental use of raw pointers, beamnet::energy_detector's constructor is in a private implementation class. beamnet::energy_detector::make is the public interface for creating new instances.

    Args:
        pkt_size : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(pkt_size):
        """
        make(int pkt_size) -> energy_detector_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of beamnet::energy_detector.

        To avoid accidental use of raw pointers, beamnet::energy_detector's constructor is in a private implementation class. beamnet::energy_detector::make is the public interface for creating new instances.

        Args:
            pkt_size : 
        """
        return _beamnet_swig.energy_detector_make(pkt_size)

    make = staticmethod(make)
    __swig_destroy__ = _beamnet_swig.delete_energy_detector
    __del__ = lambda self: None
energy_detector_swigregister = _beamnet_swig.energy_detector_swigregister
energy_detector_swigregister(energy_detector)

def energy_detector_make(pkt_size):
    """
    energy_detector_make(int pkt_size) -> energy_detector_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of beamnet::energy_detector.

    To avoid accidental use of raw pointers, beamnet::energy_detector's constructor is in a private implementation class. beamnet::energy_detector::make is the public interface for creating new instances.

    Args:
        pkt_size : 
    """
    return _beamnet_swig.energy_detector_make(pkt_size)

class energy_detector_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::beamnet::energy_detector)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::beamnet::energy_detector)> self) -> energy_detector_sptr
        __init__(boost::shared_ptr<(gr::beamnet::energy_detector)> self, energy_detector p) -> energy_detector_sptr
        """
        this = _beamnet_swig.new_energy_detector_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(energy_detector_sptr self) -> energy_detector"""
        return _beamnet_swig.energy_detector_sptr___deref__(self)

    __swig_destroy__ = _beamnet_swig.delete_energy_detector_sptr
    __del__ = lambda self: None

    def make(self, pkt_size):
        """
        make(energy_detector_sptr self, int pkt_size) -> energy_detector_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of beamnet::energy_detector.

        To avoid accidental use of raw pointers, beamnet::energy_detector's constructor is in a private implementation class. beamnet::energy_detector::make is the public interface for creating new instances.

        Args:
            pkt_size : 
        """
        return _beamnet_swig.energy_detector_sptr_make(self, pkt_size)


    def history(self):
        """history(energy_detector_sptr self) -> unsigned int"""
        return _beamnet_swig.energy_detector_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(energy_detector_sptr self, int which, int delay)
        declare_sample_delay(energy_detector_sptr self, unsigned int delay)
        """
        return _beamnet_swig.energy_detector_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(energy_detector_sptr self, int which) -> unsigned int"""
        return _beamnet_swig.energy_detector_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(energy_detector_sptr self) -> int"""
        return _beamnet_swig.energy_detector_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(energy_detector_sptr self) -> double"""
        return _beamnet_swig.energy_detector_sptr_relative_rate(self)


    def start(self):
        """start(energy_detector_sptr self) -> bool"""
        return _beamnet_swig.energy_detector_sptr_start(self)


    def stop(self):
        """stop(energy_detector_sptr self) -> bool"""
        return _beamnet_swig.energy_detector_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(energy_detector_sptr self, unsigned int which_input) -> uint64_t"""
        return _beamnet_swig.energy_detector_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(energy_detector_sptr self, unsigned int which_output) -> uint64_t"""
        return _beamnet_swig.energy_detector_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(energy_detector_sptr self) -> int"""
        return _beamnet_swig.energy_detector_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(energy_detector_sptr self, int m)"""
        return _beamnet_swig.energy_detector_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(energy_detector_sptr self)"""
        return _beamnet_swig.energy_detector_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(energy_detector_sptr self) -> bool"""
        return _beamnet_swig.energy_detector_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(energy_detector_sptr self, int m)"""
        return _beamnet_swig.energy_detector_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(energy_detector_sptr self) -> int"""
        return _beamnet_swig.energy_detector_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(energy_detector_sptr self, int i) -> long"""
        return _beamnet_swig.energy_detector_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(energy_detector_sptr self, long max_output_buffer)
        set_max_output_buffer(energy_detector_sptr self, int port, long max_output_buffer)
        """
        return _beamnet_swig.energy_detector_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(energy_detector_sptr self, int i) -> long"""
        return _beamnet_swig.energy_detector_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(energy_detector_sptr self, long min_output_buffer)
        set_min_output_buffer(energy_detector_sptr self, int port, long min_output_buffer)
        """
        return _beamnet_swig.energy_detector_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(energy_detector_sptr self) -> float"""
        return _beamnet_swig.energy_detector_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(energy_detector_sptr self) -> float"""
        return _beamnet_swig.energy_detector_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(energy_detector_sptr self) -> float"""
        return _beamnet_swig.energy_detector_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(energy_detector_sptr self) -> float"""
        return _beamnet_swig.energy_detector_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(energy_detector_sptr self) -> float"""
        return _beamnet_swig.energy_detector_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(energy_detector_sptr self) -> float"""
        return _beamnet_swig.energy_detector_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(energy_detector_sptr self, int which) -> float
        pc_input_buffers_full(energy_detector_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.energy_detector_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(energy_detector_sptr self, int which) -> float
        pc_input_buffers_full_avg(energy_detector_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.energy_detector_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(energy_detector_sptr self, int which) -> float
        pc_input_buffers_full_var(energy_detector_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.energy_detector_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(energy_detector_sptr self, int which) -> float
        pc_output_buffers_full(energy_detector_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.energy_detector_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(energy_detector_sptr self, int which) -> float
        pc_output_buffers_full_avg(energy_detector_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.energy_detector_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(energy_detector_sptr self, int which) -> float
        pc_output_buffers_full_var(energy_detector_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.energy_detector_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(energy_detector_sptr self) -> float"""
        return _beamnet_swig.energy_detector_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(energy_detector_sptr self) -> float"""
        return _beamnet_swig.energy_detector_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(energy_detector_sptr self) -> float"""
        return _beamnet_swig.energy_detector_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(energy_detector_sptr self) -> float"""
        return _beamnet_swig.energy_detector_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(energy_detector_sptr self) -> float"""
        return _beamnet_swig.energy_detector_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(energy_detector_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _beamnet_swig.energy_detector_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(energy_detector_sptr self)"""
        return _beamnet_swig.energy_detector_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(energy_detector_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _beamnet_swig.energy_detector_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(energy_detector_sptr self) -> int"""
        return _beamnet_swig.energy_detector_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(energy_detector_sptr self) -> int"""
        return _beamnet_swig.energy_detector_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(energy_detector_sptr self, int priority) -> int"""
        return _beamnet_swig.energy_detector_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(energy_detector_sptr self) -> std::string"""
        return _beamnet_swig.energy_detector_sptr_name(self)


    def symbol_name(self):
        """symbol_name(energy_detector_sptr self) -> std::string"""
        return _beamnet_swig.energy_detector_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(energy_detector_sptr self) -> io_signature_sptr"""
        return _beamnet_swig.energy_detector_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(energy_detector_sptr self) -> io_signature_sptr"""
        return _beamnet_swig.energy_detector_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(energy_detector_sptr self) -> long"""
        return _beamnet_swig.energy_detector_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(energy_detector_sptr self) -> basic_block_sptr"""
        return _beamnet_swig.energy_detector_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(energy_detector_sptr self, int ninputs, int noutputs) -> bool"""
        return _beamnet_swig.energy_detector_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(energy_detector_sptr self) -> std::string"""
        return _beamnet_swig.energy_detector_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(energy_detector_sptr self, std::string name)"""
        return _beamnet_swig.energy_detector_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(energy_detector_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _beamnet_swig.energy_detector_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(energy_detector_sptr self) -> swig_int_ptr"""
        return _beamnet_swig.energy_detector_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(energy_detector_sptr self) -> swig_int_ptr"""
        return _beamnet_swig.energy_detector_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(energy_detector_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _beamnet_swig.energy_detector_sptr_message_subscribers(self, which_port)

energy_detector_sptr_swigregister = _beamnet_swig.energy_detector_sptr_swigregister
energy_detector_sptr_swigregister(energy_detector_sptr)


energy_detector_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
energy_detector = energy_detector.make;

class symbol_sync(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of beamnet::symbol_sync.

    To avoid accidental use of raw pointers, beamnet::symbol_sync's constructor is in a private implementation class. beamnet::symbol_sync::make is the public interface for creating new instances.

    Args:
        fft_size : 
        sync_word : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(fft_size, sync_word):
        """
        make(int fft_size, pmt_vector_cfloat sync_word) -> symbol_sync_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of beamnet::symbol_sync.

        To avoid accidental use of raw pointers, beamnet::symbol_sync's constructor is in a private implementation class. beamnet::symbol_sync::make is the public interface for creating new instances.

        Args:
            fft_size : 
            sync_word : 
        """
        return _beamnet_swig.symbol_sync_make(fft_size, sync_word)

    make = staticmethod(make)
    __swig_destroy__ = _beamnet_swig.delete_symbol_sync
    __del__ = lambda self: None
symbol_sync_swigregister = _beamnet_swig.symbol_sync_swigregister
symbol_sync_swigregister(symbol_sync)

def symbol_sync_make(fft_size, sync_word):
    """
    symbol_sync_make(int fft_size, pmt_vector_cfloat sync_word) -> symbol_sync_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of beamnet::symbol_sync.

    To avoid accidental use of raw pointers, beamnet::symbol_sync's constructor is in a private implementation class. beamnet::symbol_sync::make is the public interface for creating new instances.

    Args:
        fft_size : 
        sync_word : 
    """
    return _beamnet_swig.symbol_sync_make(fft_size, sync_word)

class symbol_sync_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::beamnet::symbol_sync)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::beamnet::symbol_sync)> self) -> symbol_sync_sptr
        __init__(boost::shared_ptr<(gr::beamnet::symbol_sync)> self, symbol_sync p) -> symbol_sync_sptr
        """
        this = _beamnet_swig.new_symbol_sync_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(symbol_sync_sptr self) -> symbol_sync"""
        return _beamnet_swig.symbol_sync_sptr___deref__(self)

    __swig_destroy__ = _beamnet_swig.delete_symbol_sync_sptr
    __del__ = lambda self: None

    def make(self, fft_size, sync_word):
        """
        make(symbol_sync_sptr self, int fft_size, pmt_vector_cfloat sync_word) -> symbol_sync_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of beamnet::symbol_sync.

        To avoid accidental use of raw pointers, beamnet::symbol_sync's constructor is in a private implementation class. beamnet::symbol_sync::make is the public interface for creating new instances.

        Args:
            fft_size : 
            sync_word : 
        """
        return _beamnet_swig.symbol_sync_sptr_make(self, fft_size, sync_word)


    def history(self):
        """history(symbol_sync_sptr self) -> unsigned int"""
        return _beamnet_swig.symbol_sync_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(symbol_sync_sptr self, int which, int delay)
        declare_sample_delay(symbol_sync_sptr self, unsigned int delay)
        """
        return _beamnet_swig.symbol_sync_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(symbol_sync_sptr self, int which) -> unsigned int"""
        return _beamnet_swig.symbol_sync_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(symbol_sync_sptr self) -> int"""
        return _beamnet_swig.symbol_sync_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(symbol_sync_sptr self) -> double"""
        return _beamnet_swig.symbol_sync_sptr_relative_rate(self)


    def start(self):
        """start(symbol_sync_sptr self) -> bool"""
        return _beamnet_swig.symbol_sync_sptr_start(self)


    def stop(self):
        """stop(symbol_sync_sptr self) -> bool"""
        return _beamnet_swig.symbol_sync_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(symbol_sync_sptr self, unsigned int which_input) -> uint64_t"""
        return _beamnet_swig.symbol_sync_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(symbol_sync_sptr self, unsigned int which_output) -> uint64_t"""
        return _beamnet_swig.symbol_sync_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(symbol_sync_sptr self) -> int"""
        return _beamnet_swig.symbol_sync_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(symbol_sync_sptr self, int m)"""
        return _beamnet_swig.symbol_sync_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(symbol_sync_sptr self)"""
        return _beamnet_swig.symbol_sync_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(symbol_sync_sptr self) -> bool"""
        return _beamnet_swig.symbol_sync_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(symbol_sync_sptr self, int m)"""
        return _beamnet_swig.symbol_sync_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(symbol_sync_sptr self) -> int"""
        return _beamnet_swig.symbol_sync_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(symbol_sync_sptr self, int i) -> long"""
        return _beamnet_swig.symbol_sync_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(symbol_sync_sptr self, long max_output_buffer)
        set_max_output_buffer(symbol_sync_sptr self, int port, long max_output_buffer)
        """
        return _beamnet_swig.symbol_sync_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(symbol_sync_sptr self, int i) -> long"""
        return _beamnet_swig.symbol_sync_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(symbol_sync_sptr self, long min_output_buffer)
        set_min_output_buffer(symbol_sync_sptr self, int port, long min_output_buffer)
        """
        return _beamnet_swig.symbol_sync_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(symbol_sync_sptr self) -> float"""
        return _beamnet_swig.symbol_sync_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(symbol_sync_sptr self) -> float"""
        return _beamnet_swig.symbol_sync_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(symbol_sync_sptr self) -> float"""
        return _beamnet_swig.symbol_sync_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(symbol_sync_sptr self) -> float"""
        return _beamnet_swig.symbol_sync_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(symbol_sync_sptr self) -> float"""
        return _beamnet_swig.symbol_sync_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(symbol_sync_sptr self) -> float"""
        return _beamnet_swig.symbol_sync_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(symbol_sync_sptr self, int which) -> float
        pc_input_buffers_full(symbol_sync_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.symbol_sync_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(symbol_sync_sptr self, int which) -> float
        pc_input_buffers_full_avg(symbol_sync_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.symbol_sync_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(symbol_sync_sptr self, int which) -> float
        pc_input_buffers_full_var(symbol_sync_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.symbol_sync_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(symbol_sync_sptr self, int which) -> float
        pc_output_buffers_full(symbol_sync_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.symbol_sync_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(symbol_sync_sptr self, int which) -> float
        pc_output_buffers_full_avg(symbol_sync_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.symbol_sync_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(symbol_sync_sptr self, int which) -> float
        pc_output_buffers_full_var(symbol_sync_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.symbol_sync_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(symbol_sync_sptr self) -> float"""
        return _beamnet_swig.symbol_sync_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(symbol_sync_sptr self) -> float"""
        return _beamnet_swig.symbol_sync_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(symbol_sync_sptr self) -> float"""
        return _beamnet_swig.symbol_sync_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(symbol_sync_sptr self) -> float"""
        return _beamnet_swig.symbol_sync_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(symbol_sync_sptr self) -> float"""
        return _beamnet_swig.symbol_sync_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(symbol_sync_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _beamnet_swig.symbol_sync_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(symbol_sync_sptr self)"""
        return _beamnet_swig.symbol_sync_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(symbol_sync_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _beamnet_swig.symbol_sync_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(symbol_sync_sptr self) -> int"""
        return _beamnet_swig.symbol_sync_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(symbol_sync_sptr self) -> int"""
        return _beamnet_swig.symbol_sync_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(symbol_sync_sptr self, int priority) -> int"""
        return _beamnet_swig.symbol_sync_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(symbol_sync_sptr self) -> std::string"""
        return _beamnet_swig.symbol_sync_sptr_name(self)


    def symbol_name(self):
        """symbol_name(symbol_sync_sptr self) -> std::string"""
        return _beamnet_swig.symbol_sync_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(symbol_sync_sptr self) -> io_signature_sptr"""
        return _beamnet_swig.symbol_sync_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(symbol_sync_sptr self) -> io_signature_sptr"""
        return _beamnet_swig.symbol_sync_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(symbol_sync_sptr self) -> long"""
        return _beamnet_swig.symbol_sync_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(symbol_sync_sptr self) -> basic_block_sptr"""
        return _beamnet_swig.symbol_sync_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(symbol_sync_sptr self, int ninputs, int noutputs) -> bool"""
        return _beamnet_swig.symbol_sync_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(symbol_sync_sptr self) -> std::string"""
        return _beamnet_swig.symbol_sync_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(symbol_sync_sptr self, std::string name)"""
        return _beamnet_swig.symbol_sync_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(symbol_sync_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _beamnet_swig.symbol_sync_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(symbol_sync_sptr self) -> swig_int_ptr"""
        return _beamnet_swig.symbol_sync_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(symbol_sync_sptr self) -> swig_int_ptr"""
        return _beamnet_swig.symbol_sync_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(symbol_sync_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _beamnet_swig.symbol_sync_sptr_message_subscribers(self, which_port)

symbol_sync_sptr_swigregister = _beamnet_swig.symbol_sync_sptr_swigregister
symbol_sync_sptr_swigregister(symbol_sync_sptr)


symbol_sync_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
symbol_sync = symbol_sync.make;

class packet_extraction(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of beamnet::packet_extraction.

    To avoid accidental use of raw pointers, beamnet::packet_extraction's constructor is in a private implementation class. beamnet::packet_extraction::make is the public interface for creating new instances.

    Args:
        fft_size : 
        pkt_size : 
        thr : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(samp_rate, fft_size, pkt_size, thr):
        """
        make(float samp_rate, int fft_size, int pkt_size, float thr) -> packet_extraction_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of beamnet::packet_extraction.

        To avoid accidental use of raw pointers, beamnet::packet_extraction's constructor is in a private implementation class. beamnet::packet_extraction::make is the public interface for creating new instances.

        Args:
            fft_size : 
            pkt_size : 
            thr : 
        """
        return _beamnet_swig.packet_extraction_make(samp_rate, fft_size, pkt_size, thr)

    make = staticmethod(make)
    __swig_destroy__ = _beamnet_swig.delete_packet_extraction
    __del__ = lambda self: None
packet_extraction_swigregister = _beamnet_swig.packet_extraction_swigregister
packet_extraction_swigregister(packet_extraction)

def packet_extraction_make(samp_rate, fft_size, pkt_size, thr):
    """
    packet_extraction_make(float samp_rate, int fft_size, int pkt_size, float thr) -> packet_extraction_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of beamnet::packet_extraction.

    To avoid accidental use of raw pointers, beamnet::packet_extraction's constructor is in a private implementation class. beamnet::packet_extraction::make is the public interface for creating new instances.

    Args:
        fft_size : 
        pkt_size : 
        thr : 
    """
    return _beamnet_swig.packet_extraction_make(samp_rate, fft_size, pkt_size, thr)

class packet_extraction_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::beamnet::packet_extraction)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::beamnet::packet_extraction)> self) -> packet_extraction_sptr
        __init__(boost::shared_ptr<(gr::beamnet::packet_extraction)> self, packet_extraction p) -> packet_extraction_sptr
        """
        this = _beamnet_swig.new_packet_extraction_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(packet_extraction_sptr self) -> packet_extraction"""
        return _beamnet_swig.packet_extraction_sptr___deref__(self)

    __swig_destroy__ = _beamnet_swig.delete_packet_extraction_sptr
    __del__ = lambda self: None

    def make(self, samp_rate, fft_size, pkt_size, thr):
        """
        make(packet_extraction_sptr self, float samp_rate, int fft_size, int pkt_size, float thr) -> packet_extraction_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of beamnet::packet_extraction.

        To avoid accidental use of raw pointers, beamnet::packet_extraction's constructor is in a private implementation class. beamnet::packet_extraction::make is the public interface for creating new instances.

        Args:
            fft_size : 
            pkt_size : 
            thr : 
        """
        return _beamnet_swig.packet_extraction_sptr_make(self, samp_rate, fft_size, pkt_size, thr)


    def history(self):
        """history(packet_extraction_sptr self) -> unsigned int"""
        return _beamnet_swig.packet_extraction_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(packet_extraction_sptr self, int which, int delay)
        declare_sample_delay(packet_extraction_sptr self, unsigned int delay)
        """
        return _beamnet_swig.packet_extraction_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(packet_extraction_sptr self, int which) -> unsigned int"""
        return _beamnet_swig.packet_extraction_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(packet_extraction_sptr self) -> int"""
        return _beamnet_swig.packet_extraction_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(packet_extraction_sptr self) -> double"""
        return _beamnet_swig.packet_extraction_sptr_relative_rate(self)


    def start(self):
        """start(packet_extraction_sptr self) -> bool"""
        return _beamnet_swig.packet_extraction_sptr_start(self)


    def stop(self):
        """stop(packet_extraction_sptr self) -> bool"""
        return _beamnet_swig.packet_extraction_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(packet_extraction_sptr self, unsigned int which_input) -> uint64_t"""
        return _beamnet_swig.packet_extraction_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(packet_extraction_sptr self, unsigned int which_output) -> uint64_t"""
        return _beamnet_swig.packet_extraction_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(packet_extraction_sptr self) -> int"""
        return _beamnet_swig.packet_extraction_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(packet_extraction_sptr self, int m)"""
        return _beamnet_swig.packet_extraction_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(packet_extraction_sptr self)"""
        return _beamnet_swig.packet_extraction_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(packet_extraction_sptr self) -> bool"""
        return _beamnet_swig.packet_extraction_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(packet_extraction_sptr self, int m)"""
        return _beamnet_swig.packet_extraction_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(packet_extraction_sptr self) -> int"""
        return _beamnet_swig.packet_extraction_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(packet_extraction_sptr self, int i) -> long"""
        return _beamnet_swig.packet_extraction_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(packet_extraction_sptr self, long max_output_buffer)
        set_max_output_buffer(packet_extraction_sptr self, int port, long max_output_buffer)
        """
        return _beamnet_swig.packet_extraction_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(packet_extraction_sptr self, int i) -> long"""
        return _beamnet_swig.packet_extraction_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(packet_extraction_sptr self, long min_output_buffer)
        set_min_output_buffer(packet_extraction_sptr self, int port, long min_output_buffer)
        """
        return _beamnet_swig.packet_extraction_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(packet_extraction_sptr self) -> float"""
        return _beamnet_swig.packet_extraction_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(packet_extraction_sptr self) -> float"""
        return _beamnet_swig.packet_extraction_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(packet_extraction_sptr self) -> float"""
        return _beamnet_swig.packet_extraction_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(packet_extraction_sptr self) -> float"""
        return _beamnet_swig.packet_extraction_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(packet_extraction_sptr self) -> float"""
        return _beamnet_swig.packet_extraction_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(packet_extraction_sptr self) -> float"""
        return _beamnet_swig.packet_extraction_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(packet_extraction_sptr self, int which) -> float
        pc_input_buffers_full(packet_extraction_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_extraction_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(packet_extraction_sptr self, int which) -> float
        pc_input_buffers_full_avg(packet_extraction_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_extraction_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(packet_extraction_sptr self, int which) -> float
        pc_input_buffers_full_var(packet_extraction_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_extraction_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(packet_extraction_sptr self, int which) -> float
        pc_output_buffers_full(packet_extraction_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_extraction_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(packet_extraction_sptr self, int which) -> float
        pc_output_buffers_full_avg(packet_extraction_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_extraction_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(packet_extraction_sptr self, int which) -> float
        pc_output_buffers_full_var(packet_extraction_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_extraction_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(packet_extraction_sptr self) -> float"""
        return _beamnet_swig.packet_extraction_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(packet_extraction_sptr self) -> float"""
        return _beamnet_swig.packet_extraction_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(packet_extraction_sptr self) -> float"""
        return _beamnet_swig.packet_extraction_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(packet_extraction_sptr self) -> float"""
        return _beamnet_swig.packet_extraction_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(packet_extraction_sptr self) -> float"""
        return _beamnet_swig.packet_extraction_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(packet_extraction_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _beamnet_swig.packet_extraction_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(packet_extraction_sptr self)"""
        return _beamnet_swig.packet_extraction_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(packet_extraction_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _beamnet_swig.packet_extraction_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(packet_extraction_sptr self) -> int"""
        return _beamnet_swig.packet_extraction_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(packet_extraction_sptr self) -> int"""
        return _beamnet_swig.packet_extraction_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(packet_extraction_sptr self, int priority) -> int"""
        return _beamnet_swig.packet_extraction_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(packet_extraction_sptr self) -> std::string"""
        return _beamnet_swig.packet_extraction_sptr_name(self)


    def symbol_name(self):
        """symbol_name(packet_extraction_sptr self) -> std::string"""
        return _beamnet_swig.packet_extraction_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(packet_extraction_sptr self) -> io_signature_sptr"""
        return _beamnet_swig.packet_extraction_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(packet_extraction_sptr self) -> io_signature_sptr"""
        return _beamnet_swig.packet_extraction_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(packet_extraction_sptr self) -> long"""
        return _beamnet_swig.packet_extraction_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(packet_extraction_sptr self) -> basic_block_sptr"""
        return _beamnet_swig.packet_extraction_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(packet_extraction_sptr self, int ninputs, int noutputs) -> bool"""
        return _beamnet_swig.packet_extraction_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(packet_extraction_sptr self) -> std::string"""
        return _beamnet_swig.packet_extraction_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(packet_extraction_sptr self, std::string name)"""
        return _beamnet_swig.packet_extraction_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(packet_extraction_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _beamnet_swig.packet_extraction_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(packet_extraction_sptr self) -> swig_int_ptr"""
        return _beamnet_swig.packet_extraction_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(packet_extraction_sptr self) -> swig_int_ptr"""
        return _beamnet_swig.packet_extraction_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(packet_extraction_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _beamnet_swig.packet_extraction_sptr_message_subscribers(self, which_port)

packet_extraction_sptr_swigregister = _beamnet_swig.packet_extraction_sptr_swigregister
packet_extraction_sptr_swigregister(packet_extraction_sptr)


packet_extraction_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packet_extraction = packet_extraction.make;

class packet_trigger(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of beamnet::packet_trigger.

    To avoid accidental use of raw pointers, beamnet::packet_trigger's constructor is in a private implementation class. beamnet::packet_trigger::make is the public interface for creating new instances.

    Args:
        fft_size : 
        pkt_size : 
        thr : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(fft_size, pkt_size, thr):
        """
        make(int fft_size, int pkt_size, float thr) -> packet_trigger_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of beamnet::packet_trigger.

        To avoid accidental use of raw pointers, beamnet::packet_trigger's constructor is in a private implementation class. beamnet::packet_trigger::make is the public interface for creating new instances.

        Args:
            fft_size : 
            pkt_size : 
            thr : 
        """
        return _beamnet_swig.packet_trigger_make(fft_size, pkt_size, thr)

    make = staticmethod(make)
    __swig_destroy__ = _beamnet_swig.delete_packet_trigger
    __del__ = lambda self: None
packet_trigger_swigregister = _beamnet_swig.packet_trigger_swigregister
packet_trigger_swigregister(packet_trigger)

def packet_trigger_make(fft_size, pkt_size, thr):
    """
    packet_trigger_make(int fft_size, int pkt_size, float thr) -> packet_trigger_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of beamnet::packet_trigger.

    To avoid accidental use of raw pointers, beamnet::packet_trigger's constructor is in a private implementation class. beamnet::packet_trigger::make is the public interface for creating new instances.

    Args:
        fft_size : 
        pkt_size : 
        thr : 
    """
    return _beamnet_swig.packet_trigger_make(fft_size, pkt_size, thr)

class packet_trigger_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::beamnet::packet_trigger)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::beamnet::packet_trigger)> self) -> packet_trigger_sptr
        __init__(boost::shared_ptr<(gr::beamnet::packet_trigger)> self, packet_trigger p) -> packet_trigger_sptr
        """
        this = _beamnet_swig.new_packet_trigger_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(packet_trigger_sptr self) -> packet_trigger"""
        return _beamnet_swig.packet_trigger_sptr___deref__(self)

    __swig_destroy__ = _beamnet_swig.delete_packet_trigger_sptr
    __del__ = lambda self: None

    def make(self, fft_size, pkt_size, thr):
        """
        make(packet_trigger_sptr self, int fft_size, int pkt_size, float thr) -> packet_trigger_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of beamnet::packet_trigger.

        To avoid accidental use of raw pointers, beamnet::packet_trigger's constructor is in a private implementation class. beamnet::packet_trigger::make is the public interface for creating new instances.

        Args:
            fft_size : 
            pkt_size : 
            thr : 
        """
        return _beamnet_swig.packet_trigger_sptr_make(self, fft_size, pkt_size, thr)


    def history(self):
        """history(packet_trigger_sptr self) -> unsigned int"""
        return _beamnet_swig.packet_trigger_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(packet_trigger_sptr self, int which, int delay)
        declare_sample_delay(packet_trigger_sptr self, unsigned int delay)
        """
        return _beamnet_swig.packet_trigger_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(packet_trigger_sptr self, int which) -> unsigned int"""
        return _beamnet_swig.packet_trigger_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(packet_trigger_sptr self) -> int"""
        return _beamnet_swig.packet_trigger_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(packet_trigger_sptr self) -> double"""
        return _beamnet_swig.packet_trigger_sptr_relative_rate(self)


    def start(self):
        """start(packet_trigger_sptr self) -> bool"""
        return _beamnet_swig.packet_trigger_sptr_start(self)


    def stop(self):
        """stop(packet_trigger_sptr self) -> bool"""
        return _beamnet_swig.packet_trigger_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(packet_trigger_sptr self, unsigned int which_input) -> uint64_t"""
        return _beamnet_swig.packet_trigger_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(packet_trigger_sptr self, unsigned int which_output) -> uint64_t"""
        return _beamnet_swig.packet_trigger_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(packet_trigger_sptr self) -> int"""
        return _beamnet_swig.packet_trigger_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(packet_trigger_sptr self, int m)"""
        return _beamnet_swig.packet_trigger_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(packet_trigger_sptr self)"""
        return _beamnet_swig.packet_trigger_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(packet_trigger_sptr self) -> bool"""
        return _beamnet_swig.packet_trigger_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(packet_trigger_sptr self, int m)"""
        return _beamnet_swig.packet_trigger_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(packet_trigger_sptr self) -> int"""
        return _beamnet_swig.packet_trigger_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(packet_trigger_sptr self, int i) -> long"""
        return _beamnet_swig.packet_trigger_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(packet_trigger_sptr self, long max_output_buffer)
        set_max_output_buffer(packet_trigger_sptr self, int port, long max_output_buffer)
        """
        return _beamnet_swig.packet_trigger_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(packet_trigger_sptr self, int i) -> long"""
        return _beamnet_swig.packet_trigger_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(packet_trigger_sptr self, long min_output_buffer)
        set_min_output_buffer(packet_trigger_sptr self, int port, long min_output_buffer)
        """
        return _beamnet_swig.packet_trigger_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(packet_trigger_sptr self) -> float"""
        return _beamnet_swig.packet_trigger_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(packet_trigger_sptr self) -> float"""
        return _beamnet_swig.packet_trigger_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(packet_trigger_sptr self) -> float"""
        return _beamnet_swig.packet_trigger_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(packet_trigger_sptr self) -> float"""
        return _beamnet_swig.packet_trigger_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(packet_trigger_sptr self) -> float"""
        return _beamnet_swig.packet_trigger_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(packet_trigger_sptr self) -> float"""
        return _beamnet_swig.packet_trigger_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(packet_trigger_sptr self, int which) -> float
        pc_input_buffers_full(packet_trigger_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_trigger_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(packet_trigger_sptr self, int which) -> float
        pc_input_buffers_full_avg(packet_trigger_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_trigger_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(packet_trigger_sptr self, int which) -> float
        pc_input_buffers_full_var(packet_trigger_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_trigger_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(packet_trigger_sptr self, int which) -> float
        pc_output_buffers_full(packet_trigger_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_trigger_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(packet_trigger_sptr self, int which) -> float
        pc_output_buffers_full_avg(packet_trigger_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_trigger_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(packet_trigger_sptr self, int which) -> float
        pc_output_buffers_full_var(packet_trigger_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_trigger_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(packet_trigger_sptr self) -> float"""
        return _beamnet_swig.packet_trigger_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(packet_trigger_sptr self) -> float"""
        return _beamnet_swig.packet_trigger_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(packet_trigger_sptr self) -> float"""
        return _beamnet_swig.packet_trigger_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(packet_trigger_sptr self) -> float"""
        return _beamnet_swig.packet_trigger_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(packet_trigger_sptr self) -> float"""
        return _beamnet_swig.packet_trigger_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(packet_trigger_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _beamnet_swig.packet_trigger_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(packet_trigger_sptr self)"""
        return _beamnet_swig.packet_trigger_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(packet_trigger_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _beamnet_swig.packet_trigger_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(packet_trigger_sptr self) -> int"""
        return _beamnet_swig.packet_trigger_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(packet_trigger_sptr self) -> int"""
        return _beamnet_swig.packet_trigger_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(packet_trigger_sptr self, int priority) -> int"""
        return _beamnet_swig.packet_trigger_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(packet_trigger_sptr self) -> std::string"""
        return _beamnet_swig.packet_trigger_sptr_name(self)


    def symbol_name(self):
        """symbol_name(packet_trigger_sptr self) -> std::string"""
        return _beamnet_swig.packet_trigger_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(packet_trigger_sptr self) -> io_signature_sptr"""
        return _beamnet_swig.packet_trigger_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(packet_trigger_sptr self) -> io_signature_sptr"""
        return _beamnet_swig.packet_trigger_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(packet_trigger_sptr self) -> long"""
        return _beamnet_swig.packet_trigger_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(packet_trigger_sptr self) -> basic_block_sptr"""
        return _beamnet_swig.packet_trigger_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(packet_trigger_sptr self, int ninputs, int noutputs) -> bool"""
        return _beamnet_swig.packet_trigger_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(packet_trigger_sptr self) -> std::string"""
        return _beamnet_swig.packet_trigger_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(packet_trigger_sptr self, std::string name)"""
        return _beamnet_swig.packet_trigger_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(packet_trigger_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _beamnet_swig.packet_trigger_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(packet_trigger_sptr self) -> swig_int_ptr"""
        return _beamnet_swig.packet_trigger_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(packet_trigger_sptr self) -> swig_int_ptr"""
        return _beamnet_swig.packet_trigger_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(packet_trigger_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _beamnet_swig.packet_trigger_sptr_message_subscribers(self, which_port)

packet_trigger_sptr_swigregister = _beamnet_swig.packet_trigger_sptr_swigregister
packet_trigger_sptr_swigregister(packet_trigger_sptr)


packet_trigger_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packet_trigger = packet_trigger.make;

class source_pkt(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of beamnet::source_pkt.

    To avoid accidental use of raw pointers, beamnet::source_pkt's constructor is in a private implementation class. beamnet::source_pkt::make is the public interface for creating new instances.

    Args:
        tx : 
        index : 
        fft_size : 
        hd_len : 
        pd_len : 
        sync_word : 
        baseline : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(tx, index, fft_size, hd_len, pd_len, sync_word, baseline):
        """
        make(int tx, int index, int fft_size, int hd_len, int pd_len, pmt_vector_cfloat sync_word, int baseline) -> source_pkt_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of beamnet::source_pkt.

        To avoid accidental use of raw pointers, beamnet::source_pkt's constructor is in a private implementation class. beamnet::source_pkt::make is the public interface for creating new instances.

        Args:
            tx : 
            index : 
            fft_size : 
            hd_len : 
            pd_len : 
            sync_word : 
            baseline : 
        """
        return _beamnet_swig.source_pkt_make(tx, index, fft_size, hd_len, pd_len, sync_word, baseline)

    make = staticmethod(make)
    __swig_destroy__ = _beamnet_swig.delete_source_pkt
    __del__ = lambda self: None
source_pkt_swigregister = _beamnet_swig.source_pkt_swigregister
source_pkt_swigregister(source_pkt)

def source_pkt_make(tx, index, fft_size, hd_len, pd_len, sync_word, baseline):
    """
    source_pkt_make(int tx, int index, int fft_size, int hd_len, int pd_len, pmt_vector_cfloat sync_word, int baseline) -> source_pkt_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of beamnet::source_pkt.

    To avoid accidental use of raw pointers, beamnet::source_pkt's constructor is in a private implementation class. beamnet::source_pkt::make is the public interface for creating new instances.

    Args:
        tx : 
        index : 
        fft_size : 
        hd_len : 
        pd_len : 
        sync_word : 
        baseline : 
    """
    return _beamnet_swig.source_pkt_make(tx, index, fft_size, hd_len, pd_len, sync_word, baseline)

class source_pkt_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::beamnet::source_pkt)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::beamnet::source_pkt)> self) -> source_pkt_sptr
        __init__(boost::shared_ptr<(gr::beamnet::source_pkt)> self, source_pkt p) -> source_pkt_sptr
        """
        this = _beamnet_swig.new_source_pkt_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(source_pkt_sptr self) -> source_pkt"""
        return _beamnet_swig.source_pkt_sptr___deref__(self)

    __swig_destroy__ = _beamnet_swig.delete_source_pkt_sptr
    __del__ = lambda self: None

    def make(self, tx, index, fft_size, hd_len, pd_len, sync_word, baseline):
        """
        make(source_pkt_sptr self, int tx, int index, int fft_size, int hd_len, int pd_len, pmt_vector_cfloat sync_word, int baseline) -> source_pkt_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of beamnet::source_pkt.

        To avoid accidental use of raw pointers, beamnet::source_pkt's constructor is in a private implementation class. beamnet::source_pkt::make is the public interface for creating new instances.

        Args:
            tx : 
            index : 
            fft_size : 
            hd_len : 
            pd_len : 
            sync_word : 
            baseline : 
        """
        return _beamnet_swig.source_pkt_sptr_make(self, tx, index, fft_size, hd_len, pd_len, sync_word, baseline)


    def history(self):
        """history(source_pkt_sptr self) -> unsigned int"""
        return _beamnet_swig.source_pkt_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(source_pkt_sptr self, int which, int delay)
        declare_sample_delay(source_pkt_sptr self, unsigned int delay)
        """
        return _beamnet_swig.source_pkt_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(source_pkt_sptr self, int which) -> unsigned int"""
        return _beamnet_swig.source_pkt_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(source_pkt_sptr self) -> int"""
        return _beamnet_swig.source_pkt_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(source_pkt_sptr self) -> double"""
        return _beamnet_swig.source_pkt_sptr_relative_rate(self)


    def start(self):
        """start(source_pkt_sptr self) -> bool"""
        return _beamnet_swig.source_pkt_sptr_start(self)


    def stop(self):
        """stop(source_pkt_sptr self) -> bool"""
        return _beamnet_swig.source_pkt_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(source_pkt_sptr self, unsigned int which_input) -> uint64_t"""
        return _beamnet_swig.source_pkt_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(source_pkt_sptr self, unsigned int which_output) -> uint64_t"""
        return _beamnet_swig.source_pkt_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(source_pkt_sptr self) -> int"""
        return _beamnet_swig.source_pkt_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(source_pkt_sptr self, int m)"""
        return _beamnet_swig.source_pkt_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(source_pkt_sptr self)"""
        return _beamnet_swig.source_pkt_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(source_pkt_sptr self) -> bool"""
        return _beamnet_swig.source_pkt_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(source_pkt_sptr self, int m)"""
        return _beamnet_swig.source_pkt_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(source_pkt_sptr self) -> int"""
        return _beamnet_swig.source_pkt_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(source_pkt_sptr self, int i) -> long"""
        return _beamnet_swig.source_pkt_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(source_pkt_sptr self, long max_output_buffer)
        set_max_output_buffer(source_pkt_sptr self, int port, long max_output_buffer)
        """
        return _beamnet_swig.source_pkt_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(source_pkt_sptr self, int i) -> long"""
        return _beamnet_swig.source_pkt_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(source_pkt_sptr self, long min_output_buffer)
        set_min_output_buffer(source_pkt_sptr self, int port, long min_output_buffer)
        """
        return _beamnet_swig.source_pkt_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(source_pkt_sptr self) -> float"""
        return _beamnet_swig.source_pkt_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(source_pkt_sptr self) -> float"""
        return _beamnet_swig.source_pkt_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(source_pkt_sptr self) -> float"""
        return _beamnet_swig.source_pkt_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(source_pkt_sptr self) -> float"""
        return _beamnet_swig.source_pkt_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(source_pkt_sptr self) -> float"""
        return _beamnet_swig.source_pkt_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(source_pkt_sptr self) -> float"""
        return _beamnet_swig.source_pkt_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(source_pkt_sptr self, int which) -> float
        pc_input_buffers_full(source_pkt_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.source_pkt_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(source_pkt_sptr self, int which) -> float
        pc_input_buffers_full_avg(source_pkt_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.source_pkt_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(source_pkt_sptr self, int which) -> float
        pc_input_buffers_full_var(source_pkt_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.source_pkt_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(source_pkt_sptr self, int which) -> float
        pc_output_buffers_full(source_pkt_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.source_pkt_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(source_pkt_sptr self, int which) -> float
        pc_output_buffers_full_avg(source_pkt_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.source_pkt_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(source_pkt_sptr self, int which) -> float
        pc_output_buffers_full_var(source_pkt_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.source_pkt_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(source_pkt_sptr self) -> float"""
        return _beamnet_swig.source_pkt_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(source_pkt_sptr self) -> float"""
        return _beamnet_swig.source_pkt_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(source_pkt_sptr self) -> float"""
        return _beamnet_swig.source_pkt_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(source_pkt_sptr self) -> float"""
        return _beamnet_swig.source_pkt_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(source_pkt_sptr self) -> float"""
        return _beamnet_swig.source_pkt_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(source_pkt_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _beamnet_swig.source_pkt_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(source_pkt_sptr self)"""
        return _beamnet_swig.source_pkt_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(source_pkt_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _beamnet_swig.source_pkt_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(source_pkt_sptr self) -> int"""
        return _beamnet_swig.source_pkt_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(source_pkt_sptr self) -> int"""
        return _beamnet_swig.source_pkt_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(source_pkt_sptr self, int priority) -> int"""
        return _beamnet_swig.source_pkt_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(source_pkt_sptr self) -> std::string"""
        return _beamnet_swig.source_pkt_sptr_name(self)


    def symbol_name(self):
        """symbol_name(source_pkt_sptr self) -> std::string"""
        return _beamnet_swig.source_pkt_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(source_pkt_sptr self) -> io_signature_sptr"""
        return _beamnet_swig.source_pkt_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(source_pkt_sptr self) -> io_signature_sptr"""
        return _beamnet_swig.source_pkt_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(source_pkt_sptr self) -> long"""
        return _beamnet_swig.source_pkt_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(source_pkt_sptr self) -> basic_block_sptr"""
        return _beamnet_swig.source_pkt_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(source_pkt_sptr self, int ninputs, int noutputs) -> bool"""
        return _beamnet_swig.source_pkt_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(source_pkt_sptr self) -> std::string"""
        return _beamnet_swig.source_pkt_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(source_pkt_sptr self, std::string name)"""
        return _beamnet_swig.source_pkt_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(source_pkt_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _beamnet_swig.source_pkt_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(source_pkt_sptr self) -> swig_int_ptr"""
        return _beamnet_swig.source_pkt_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(source_pkt_sptr self) -> swig_int_ptr"""
        return _beamnet_swig.source_pkt_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(source_pkt_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _beamnet_swig.source_pkt_sptr_message_subscribers(self, which_port)

source_pkt_sptr_swigregister = _beamnet_swig.source_pkt_sptr_swigregister
source_pkt_sptr_swigregister(source_pkt_sptr)


source_pkt_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
source_pkt = source_pkt.make;

class tx_slave_mux(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of beamnet::tx_slave_mux.

    To avoid accidental use of raw pointers, beamnet::tx_slave_mux's constructor is in a private implementation class. beamnet::tx_slave_mux::make is the public interface for creating new instances.

    Args:
        tx : 
        fft_size : 
        hd_len : 
        pd_len : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(tx, fft_size, hd_len, pd_len):
        """
        make(int tx, int fft_size, int hd_len, int pd_len) -> tx_slave_mux_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of beamnet::tx_slave_mux.

        To avoid accidental use of raw pointers, beamnet::tx_slave_mux's constructor is in a private implementation class. beamnet::tx_slave_mux::make is the public interface for creating new instances.

        Args:
            tx : 
            fft_size : 
            hd_len : 
            pd_len : 
        """
        return _beamnet_swig.tx_slave_mux_make(tx, fft_size, hd_len, pd_len)

    make = staticmethod(make)
    __swig_destroy__ = _beamnet_swig.delete_tx_slave_mux
    __del__ = lambda self: None
tx_slave_mux_swigregister = _beamnet_swig.tx_slave_mux_swigregister
tx_slave_mux_swigregister(tx_slave_mux)

def tx_slave_mux_make(tx, fft_size, hd_len, pd_len):
    """
    tx_slave_mux_make(int tx, int fft_size, int hd_len, int pd_len) -> tx_slave_mux_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of beamnet::tx_slave_mux.

    To avoid accidental use of raw pointers, beamnet::tx_slave_mux's constructor is in a private implementation class. beamnet::tx_slave_mux::make is the public interface for creating new instances.

    Args:
        tx : 
        fft_size : 
        hd_len : 
        pd_len : 
    """
    return _beamnet_swig.tx_slave_mux_make(tx, fft_size, hd_len, pd_len)

class tx_slave_mux_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::beamnet::tx_slave_mux)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::beamnet::tx_slave_mux)> self) -> tx_slave_mux_sptr
        __init__(boost::shared_ptr<(gr::beamnet::tx_slave_mux)> self, tx_slave_mux p) -> tx_slave_mux_sptr
        """
        this = _beamnet_swig.new_tx_slave_mux_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(tx_slave_mux_sptr self) -> tx_slave_mux"""
        return _beamnet_swig.tx_slave_mux_sptr___deref__(self)

    __swig_destroy__ = _beamnet_swig.delete_tx_slave_mux_sptr
    __del__ = lambda self: None

    def make(self, tx, fft_size, hd_len, pd_len):
        """
        make(tx_slave_mux_sptr self, int tx, int fft_size, int hd_len, int pd_len) -> tx_slave_mux_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of beamnet::tx_slave_mux.

        To avoid accidental use of raw pointers, beamnet::tx_slave_mux's constructor is in a private implementation class. beamnet::tx_slave_mux::make is the public interface for creating new instances.

        Args:
            tx : 
            fft_size : 
            hd_len : 
            pd_len : 
        """
        return _beamnet_swig.tx_slave_mux_sptr_make(self, tx, fft_size, hd_len, pd_len)


    def history(self):
        """history(tx_slave_mux_sptr self) -> unsigned int"""
        return _beamnet_swig.tx_slave_mux_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(tx_slave_mux_sptr self, int which, int delay)
        declare_sample_delay(tx_slave_mux_sptr self, unsigned int delay)
        """
        return _beamnet_swig.tx_slave_mux_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(tx_slave_mux_sptr self, int which) -> unsigned int"""
        return _beamnet_swig.tx_slave_mux_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(tx_slave_mux_sptr self) -> int"""
        return _beamnet_swig.tx_slave_mux_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(tx_slave_mux_sptr self) -> double"""
        return _beamnet_swig.tx_slave_mux_sptr_relative_rate(self)


    def start(self):
        """start(tx_slave_mux_sptr self) -> bool"""
        return _beamnet_swig.tx_slave_mux_sptr_start(self)


    def stop(self):
        """stop(tx_slave_mux_sptr self) -> bool"""
        return _beamnet_swig.tx_slave_mux_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(tx_slave_mux_sptr self, unsigned int which_input) -> uint64_t"""
        return _beamnet_swig.tx_slave_mux_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(tx_slave_mux_sptr self, unsigned int which_output) -> uint64_t"""
        return _beamnet_swig.tx_slave_mux_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(tx_slave_mux_sptr self) -> int"""
        return _beamnet_swig.tx_slave_mux_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(tx_slave_mux_sptr self, int m)"""
        return _beamnet_swig.tx_slave_mux_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(tx_slave_mux_sptr self)"""
        return _beamnet_swig.tx_slave_mux_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(tx_slave_mux_sptr self) -> bool"""
        return _beamnet_swig.tx_slave_mux_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(tx_slave_mux_sptr self, int m)"""
        return _beamnet_swig.tx_slave_mux_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(tx_slave_mux_sptr self) -> int"""
        return _beamnet_swig.tx_slave_mux_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(tx_slave_mux_sptr self, int i) -> long"""
        return _beamnet_swig.tx_slave_mux_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(tx_slave_mux_sptr self, long max_output_buffer)
        set_max_output_buffer(tx_slave_mux_sptr self, int port, long max_output_buffer)
        """
        return _beamnet_swig.tx_slave_mux_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(tx_slave_mux_sptr self, int i) -> long"""
        return _beamnet_swig.tx_slave_mux_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(tx_slave_mux_sptr self, long min_output_buffer)
        set_min_output_buffer(tx_slave_mux_sptr self, int port, long min_output_buffer)
        """
        return _beamnet_swig.tx_slave_mux_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(tx_slave_mux_sptr self) -> float"""
        return _beamnet_swig.tx_slave_mux_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(tx_slave_mux_sptr self) -> float"""
        return _beamnet_swig.tx_slave_mux_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(tx_slave_mux_sptr self) -> float"""
        return _beamnet_swig.tx_slave_mux_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(tx_slave_mux_sptr self) -> float"""
        return _beamnet_swig.tx_slave_mux_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(tx_slave_mux_sptr self) -> float"""
        return _beamnet_swig.tx_slave_mux_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(tx_slave_mux_sptr self) -> float"""
        return _beamnet_swig.tx_slave_mux_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(tx_slave_mux_sptr self, int which) -> float
        pc_input_buffers_full(tx_slave_mux_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.tx_slave_mux_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(tx_slave_mux_sptr self, int which) -> float
        pc_input_buffers_full_avg(tx_slave_mux_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.tx_slave_mux_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(tx_slave_mux_sptr self, int which) -> float
        pc_input_buffers_full_var(tx_slave_mux_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.tx_slave_mux_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(tx_slave_mux_sptr self, int which) -> float
        pc_output_buffers_full(tx_slave_mux_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.tx_slave_mux_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(tx_slave_mux_sptr self, int which) -> float
        pc_output_buffers_full_avg(tx_slave_mux_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.tx_slave_mux_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(tx_slave_mux_sptr self, int which) -> float
        pc_output_buffers_full_var(tx_slave_mux_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.tx_slave_mux_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(tx_slave_mux_sptr self) -> float"""
        return _beamnet_swig.tx_slave_mux_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(tx_slave_mux_sptr self) -> float"""
        return _beamnet_swig.tx_slave_mux_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(tx_slave_mux_sptr self) -> float"""
        return _beamnet_swig.tx_slave_mux_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(tx_slave_mux_sptr self) -> float"""
        return _beamnet_swig.tx_slave_mux_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(tx_slave_mux_sptr self) -> float"""
        return _beamnet_swig.tx_slave_mux_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(tx_slave_mux_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _beamnet_swig.tx_slave_mux_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(tx_slave_mux_sptr self)"""
        return _beamnet_swig.tx_slave_mux_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(tx_slave_mux_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _beamnet_swig.tx_slave_mux_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(tx_slave_mux_sptr self) -> int"""
        return _beamnet_swig.tx_slave_mux_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(tx_slave_mux_sptr self) -> int"""
        return _beamnet_swig.tx_slave_mux_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(tx_slave_mux_sptr self, int priority) -> int"""
        return _beamnet_swig.tx_slave_mux_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(tx_slave_mux_sptr self) -> std::string"""
        return _beamnet_swig.tx_slave_mux_sptr_name(self)


    def symbol_name(self):
        """symbol_name(tx_slave_mux_sptr self) -> std::string"""
        return _beamnet_swig.tx_slave_mux_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(tx_slave_mux_sptr self) -> io_signature_sptr"""
        return _beamnet_swig.tx_slave_mux_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(tx_slave_mux_sptr self) -> io_signature_sptr"""
        return _beamnet_swig.tx_slave_mux_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(tx_slave_mux_sptr self) -> long"""
        return _beamnet_swig.tx_slave_mux_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(tx_slave_mux_sptr self) -> basic_block_sptr"""
        return _beamnet_swig.tx_slave_mux_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(tx_slave_mux_sptr self, int ninputs, int noutputs) -> bool"""
        return _beamnet_swig.tx_slave_mux_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(tx_slave_mux_sptr self) -> std::string"""
        return _beamnet_swig.tx_slave_mux_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(tx_slave_mux_sptr self, std::string name)"""
        return _beamnet_swig.tx_slave_mux_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(tx_slave_mux_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _beamnet_swig.tx_slave_mux_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(tx_slave_mux_sptr self) -> swig_int_ptr"""
        return _beamnet_swig.tx_slave_mux_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(tx_slave_mux_sptr self) -> swig_int_ptr"""
        return _beamnet_swig.tx_slave_mux_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(tx_slave_mux_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _beamnet_swig.tx_slave_mux_sptr_message_subscribers(self, which_port)

tx_slave_mux_sptr_swigregister = _beamnet_swig.tx_slave_mux_sptr_swigregister
tx_slave_mux_sptr_swigregister(tx_slave_mux_sptr)


tx_slave_mux_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
tx_slave_mux = tx_slave_mux.make;

class packet_demux(object):
    """Proxy of C++ gr::beamnet::packet_demux class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(tx, fft_size, hd_len, pd_len):
        """make(int tx, int fft_size, int hd_len, int pd_len) -> packet_demux_sptr"""
        return _beamnet_swig.packet_demux_make(tx, fft_size, hd_len, pd_len)

    make = staticmethod(make)
    __swig_destroy__ = _beamnet_swig.delete_packet_demux
    __del__ = lambda self: None
packet_demux_swigregister = _beamnet_swig.packet_demux_swigregister
packet_demux_swigregister(packet_demux)

def packet_demux_make(tx, fft_size, hd_len, pd_len):
    """packet_demux_make(int tx, int fft_size, int hd_len, int pd_len) -> packet_demux_sptr"""
    return _beamnet_swig.packet_demux_make(tx, fft_size, hd_len, pd_len)

class packet_demux_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::beamnet::packet_demux)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::beamnet::packet_demux)> self) -> packet_demux_sptr
        __init__(boost::shared_ptr<(gr::beamnet::packet_demux)> self, packet_demux p) -> packet_demux_sptr
        """
        this = _beamnet_swig.new_packet_demux_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(packet_demux_sptr self) -> packet_demux"""
        return _beamnet_swig.packet_demux_sptr___deref__(self)

    __swig_destroy__ = _beamnet_swig.delete_packet_demux_sptr
    __del__ = lambda self: None

    def make(self, tx, fft_size, hd_len, pd_len):
        """make(packet_demux_sptr self, int tx, int fft_size, int hd_len, int pd_len) -> packet_demux_sptr"""
        return _beamnet_swig.packet_demux_sptr_make(self, tx, fft_size, hd_len, pd_len)


    def history(self):
        """history(packet_demux_sptr self) -> unsigned int"""
        return _beamnet_swig.packet_demux_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(packet_demux_sptr self, int which, int delay)
        declare_sample_delay(packet_demux_sptr self, unsigned int delay)
        """
        return _beamnet_swig.packet_demux_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(packet_demux_sptr self, int which) -> unsigned int"""
        return _beamnet_swig.packet_demux_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(packet_demux_sptr self) -> int"""
        return _beamnet_swig.packet_demux_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(packet_demux_sptr self) -> double"""
        return _beamnet_swig.packet_demux_sptr_relative_rate(self)


    def start(self):
        """start(packet_demux_sptr self) -> bool"""
        return _beamnet_swig.packet_demux_sptr_start(self)


    def stop(self):
        """stop(packet_demux_sptr self) -> bool"""
        return _beamnet_swig.packet_demux_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(packet_demux_sptr self, unsigned int which_input) -> uint64_t"""
        return _beamnet_swig.packet_demux_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(packet_demux_sptr self, unsigned int which_output) -> uint64_t"""
        return _beamnet_swig.packet_demux_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(packet_demux_sptr self) -> int"""
        return _beamnet_swig.packet_demux_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(packet_demux_sptr self, int m)"""
        return _beamnet_swig.packet_demux_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(packet_demux_sptr self)"""
        return _beamnet_swig.packet_demux_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(packet_demux_sptr self) -> bool"""
        return _beamnet_swig.packet_demux_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(packet_demux_sptr self, int m)"""
        return _beamnet_swig.packet_demux_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(packet_demux_sptr self) -> int"""
        return _beamnet_swig.packet_demux_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(packet_demux_sptr self, int i) -> long"""
        return _beamnet_swig.packet_demux_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(packet_demux_sptr self, long max_output_buffer)
        set_max_output_buffer(packet_demux_sptr self, int port, long max_output_buffer)
        """
        return _beamnet_swig.packet_demux_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(packet_demux_sptr self, int i) -> long"""
        return _beamnet_swig.packet_demux_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(packet_demux_sptr self, long min_output_buffer)
        set_min_output_buffer(packet_demux_sptr self, int port, long min_output_buffer)
        """
        return _beamnet_swig.packet_demux_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(packet_demux_sptr self) -> float"""
        return _beamnet_swig.packet_demux_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(packet_demux_sptr self) -> float"""
        return _beamnet_swig.packet_demux_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(packet_demux_sptr self) -> float"""
        return _beamnet_swig.packet_demux_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(packet_demux_sptr self) -> float"""
        return _beamnet_swig.packet_demux_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(packet_demux_sptr self) -> float"""
        return _beamnet_swig.packet_demux_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(packet_demux_sptr self) -> float"""
        return _beamnet_swig.packet_demux_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(packet_demux_sptr self, int which) -> float
        pc_input_buffers_full(packet_demux_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_demux_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(packet_demux_sptr self, int which) -> float
        pc_input_buffers_full_avg(packet_demux_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_demux_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(packet_demux_sptr self, int which) -> float
        pc_input_buffers_full_var(packet_demux_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_demux_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(packet_demux_sptr self, int which) -> float
        pc_output_buffers_full(packet_demux_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_demux_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(packet_demux_sptr self, int which) -> float
        pc_output_buffers_full_avg(packet_demux_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_demux_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(packet_demux_sptr self, int which) -> float
        pc_output_buffers_full_var(packet_demux_sptr self) -> pmt_vector_float
        """
        return _beamnet_swig.packet_demux_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(packet_demux_sptr self) -> float"""
        return _beamnet_swig.packet_demux_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(packet_demux_sptr self) -> float"""
        return _beamnet_swig.packet_demux_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(packet_demux_sptr self) -> float"""
        return _beamnet_swig.packet_demux_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(packet_demux_sptr self) -> float"""
        return _beamnet_swig.packet_demux_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(packet_demux_sptr self) -> float"""
        return _beamnet_swig.packet_demux_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(packet_demux_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _beamnet_swig.packet_demux_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(packet_demux_sptr self)"""
        return _beamnet_swig.packet_demux_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(packet_demux_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _beamnet_swig.packet_demux_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(packet_demux_sptr self) -> int"""
        return _beamnet_swig.packet_demux_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(packet_demux_sptr self) -> int"""
        return _beamnet_swig.packet_demux_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(packet_demux_sptr self, int priority) -> int"""
        return _beamnet_swig.packet_demux_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(packet_demux_sptr self) -> std::string"""
        return _beamnet_swig.packet_demux_sptr_name(self)


    def symbol_name(self):
        """symbol_name(packet_demux_sptr self) -> std::string"""
        return _beamnet_swig.packet_demux_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(packet_demux_sptr self) -> io_signature_sptr"""
        return _beamnet_swig.packet_demux_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(packet_demux_sptr self) -> io_signature_sptr"""
        return _beamnet_swig.packet_demux_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(packet_demux_sptr self) -> long"""
        return _beamnet_swig.packet_demux_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(packet_demux_sptr self) -> basic_block_sptr"""
        return _beamnet_swig.packet_demux_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(packet_demux_sptr self, int ninputs, int noutputs) -> bool"""
        return _beamnet_swig.packet_demux_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(packet_demux_sptr self) -> std::string"""
        return _beamnet_swig.packet_demux_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(packet_demux_sptr self, std::string name)"""
        return _beamnet_swig.packet_demux_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(packet_demux_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _beamnet_swig.packet_demux_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(packet_demux_sptr self) -> swig_int_ptr"""
        return _beamnet_swig.packet_demux_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(packet_demux_sptr self) -> swig_int_ptr"""
        return _beamnet_swig.packet_demux_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(packet_demux_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _beamnet_swig.packet_demux_sptr_message_subscribers(self, which_port)

packet_demux_sptr_swigregister = _beamnet_swig.packet_demux_sptr_swigregister
packet_demux_sptr_swigregister(packet_demux_sptr)


packet_demux_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
packet_demux = packet_demux.make;



